service:
  name: import-service

frameworkVersion: '2'

plugins:
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

  environment:
    S3_BUCKET: ${env:S3_BUCKET}
    SQS_URL: ${cf:product-service-${self:provider.stage}.SQSQueueUrl}

  iamRoleStatements:
    - Effect: 'Allow'
      Action: 's3:ListBucket'
      Resource: 
        - 'arn:aws:s3:::${env:S3_BUCKET}'
    - Effect: 'Allow'
      Action: 's3:*'
      Resource: 'arn:aws:s3:::${env:S3_BUCKET}/*'
    - Effect: 'Allow'
      Action: 'sqs:*'
      Resource:
        - '${cf:product-service-${self:provider.stage}.SQSQueueArn}'

functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http: 
          path: import
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                name: true
          authorizer:
            name: importAuthorizer
            arn:
              Fn::ImportValue: basicAuthorizerArn
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: ${env:S3_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true
resources:
  Resources:
    GatewayResponseDefault400:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

# This service requires S3 Bucket to be created manually
# Bucket name should match S3_BUCKET in .env file
# However Bucket can be created automatically using following code
#
# resources:
#   Resources:
#     S3Bucket:
#       Type: 'AWS::S3::Bucket'
#       Properties:
#         BucketName: ${env:S3_BUCKET}
#         PublicAccessBlockConfiguration:
#           BlockPublicAcls: true
#           IgnorePublicAcls: true
#           BlockPublicPolicy: true
#           RestrictPublicBuckets: true
#         CorsConfiguration:
#           CorsRules:
#             - AllowedHeaders:
#                 - '*'
#               AllowedMethods:
#                 - PUT
#               AllowedOrigins:
#                 - '*'
