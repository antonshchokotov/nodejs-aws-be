service:
  name: product-service

frameworkVersion: '2'

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

  environment:
    PG_HOST: ${env:PG_HOST}
    PG_PORT: ${env:PG_PORT}
    PG_DATABASE: ${env:PG_DATABASE}
    PG_USERNAME: ${env:PG_USERNAME}
    PG_PASSWORD: ${env:PG_PASSWORD}
    SNS_ARN:
      Ref: SNSTopic

  iamRoleStatements:
    - Effect: 'Allow'
      Action: 'sqs:*'
      Resource:
        - Fn::GetAtt: [ SQSQueue, Arn ]
    - Effect: 'Allow'
      Action: 'sns:*'
      Resource:
        Ref: SNSTopic

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue.fifo
        FifoQueue: true
        ContentBasedDeduplication: true
        ReceiveMessageWaitTimeSeconds: 20
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: catalogItemsNotificationTopic
    SNSSubscriptionSuccess:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: as.sns.success@gmail.com
        Protocol: email
        FilterPolicy:
          isImportFailed: ['false']
        TopicArn:
          Ref: SNSTopic
    SNSSubscriptionFail:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: as.sns.fail@gmail.com
        Protocol: email
        FilterPolicy:
          isImportFailed: ['true']
        TopicArn:
          Ref: SNSTopic
  Outputs:
    SQSQueueUrl:
      Value:
        Ref: SQSQueue
    SQSQueueArn:
      Value:
        Fn::GetAtt: [ SQSQueue, Arn ]

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                productId: true
  postProduct:
    handler: handler.postProduct
    events:
      - http:
          path: products
          method: post
          cors: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
